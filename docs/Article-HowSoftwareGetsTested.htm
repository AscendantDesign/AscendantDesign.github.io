<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Poppins;
	panose-1:0 0 5 0 0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:107%;
	font-size:11.0pt;
	font-family:Poppins;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Poppins;
	color:#2F5496;
	font-weight:normal;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin:0in;
	font-size:28.0pt;
	font-family:Poppins;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0in;
	font-size:28.0pt;
	font-family:Poppins;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0in;
	font-size:28.0pt;
	font-family:Poppins;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin:0in;
	font-size:28.0pt;
	font-family:Poppins;
	letter-spacing:-.5pt;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:Poppins;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:Poppins;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:Poppins;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:Poppins;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:Poppins;
	letter-spacing:-.5pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:Poppins;
	color:#2F5496;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoTitle>How Software Gets Tested</p>

<p class=MsoNormal>&nbsp;</p>

<h1>What is Software Testing?</h1>

<p class=MsoNormal>Software testing is the most common method of checking and assessing
that a software application does what it is designed to do. By testing
software, bugs are eliminated, which increases reliability and consistency of
workflow, thereby increasing performance.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Types of Formal Software Testing</h1>

<p class=MsoNormal>There are multiple different kinds of software testing, each
of which has a different purpose. Following is a general list of software
testing types.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Acceptance testing</b>. This type of testing is applied
holistically to determine whether the entire system functions as defined.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Functional testing</b>. Testing to verify whether what is
called the <i>business logic</i> of the system is matching the software
definition. The business logic of the system is generally macro-level code that
combines various small features for every function to result in identifiable
actions. For example, 'remove 3 motorcycles from inventory'. </p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Integration testing</b>. Testing to determine whether the
various inter-system and inter-component interfaces and integrations function
as defined.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Performance testing</b>. A type of testing that typically places
the system under an emulated real-life load to determine whether it will hold
up to actual demands.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Regression testing</b>. A type of testing that is typically
used to determine whether features in a newer version will break functionality
or reliability on an older version. This type of testing can be beneficial in
making sure that newer versions maintain a high level of compatibility with
older files and other external artifacts that may need to be handled by the
newer version.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Stress testing</b>. In this type of testing scenario, the
system is placed under an increasing amount until the system breaks. This
testing type is often associated with systems that have associated hardware
components, such as robots and automated machinery.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Unit testing</b>. Validation of whether each of the
atomic-level components of the software match the software definition. An
atomic-level component is the smallest portion of something that can faithfully
be tested for the current system. This scale is allowed to change from system
to system.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>Usability testing</b>. This test verifies to see how well the
finished product meets the needs and specifications of the customer or final
user to achieve productivity.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Even the simplest software applications are tested in
multiple ways, but you might notice in the above list that Beta testing isn't
typically considered to be a formal part of the software testing process. As
you can read in the article <b>What is a Beta Tester?</b>, that one additional form
of testing just might be the most important form.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>A Brief History of Software Testing</h1>

<p class=MsoNormal>From the 1940s, when modern day software was just beginning
to emerge, to the mid-1980s, the type of troubleshooting practice that dominated
involved simply looking for inconsistencies and repairing them. Low-level software
testing is generally referred to as finding and identifying <i>bugs</i>.
Although the concept of finding bugs, in the sense of flaws or glitches, in
one's designs goes all the way back to at least the time of Thomas Edison, the
modern computer age was coincidentally introduced by a machine the size of a
room that would repeatedly act in an unexpected way. The machine continued to
have unexplained problems until a troubleshooting technician happened to find a
month in one of its components. After the bug was removed, the machine started
operating as expected, and bug repair forever became the official name for
repairing both software and electronic designs.</p>

<p class=MsoNormal>By the 1990s, the basic approach of bug repair at larger
publishers had been largely replaced by more formal techniques that were more
in line with the kinds of quality assurance techniques performed on other types
of products, and by the time of this writing, it is possible to see systems
that can put software through a battery of different, unrelated tests, all for
the singular purpose of identifying any kind of problem that might not have
been seen or imagined during the design processes.</p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
